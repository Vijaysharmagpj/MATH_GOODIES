
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author HOME
 */
public class Unit_Convertor extends javax.swing.JFrame {

    /**
     * Creates new form Unit_Convertor
     */
    public Unit_Convertor() {
        initComponents();
        setVisible(true);
        setResizable(false);
        setTitle("UNIT CONVERTOR");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        from_unit.setEnabled(false);
        to_unit.setEnabled(false);
        txt_from.setEnabled(false);
        txt_to.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Unit = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txt_from = new javax.swing.JTextField();
        from_unit = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        to_unit = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        OK = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txt_to = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 3, true));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 90)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Unit Convertor");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel2.setText("Select the type of unit you want to convert");

        Unit.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Unit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select Unit----", "Angle", "Area", "Length", "Temperature", "Time", "Volume", "Weight" }));
        Unit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240)));
        Unit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Unit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnitActionPerformed(evt);
            }
        });
        Unit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UnitKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel3.setText("From");

        txt_from.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        txt_from.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240)));
        txt_from.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_fromMouseClicked(evt);
            }
        });
        txt_from.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_fromFocusGained(evt);
            }
        });
        txt_from.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_fromKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_fromKeyReleased(evt);
            }
        });

        from_unit.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        from_unit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240)));
        from_unit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        from_unit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                from_unitActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setText("To");

        to_unit.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        to_unit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240), new java.awt.Color(0, 0, 240)));
        to_unit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        to_unit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                to_unitActionPerformed(evt);
            }
        });

        OK.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        OK.setText("OK");
        OK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });
        OK.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OKFocusGained(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        txt_to.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        txt_to.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 240), 2, true));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_to, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_to, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/arrow.png"))); // NOI18N

        jButton4.setBackground(new java.awt.Color(153, 153, 255));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 102));
        jButton4.setText("Main Menu");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 102));
        jLabel7.setText("Unit Convertor");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Unit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButton4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel7)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(81, 81, 81))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(from_unit, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_from)
                            .addComponent(to_unit, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Unit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_from, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(from_unit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(to_unit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnitActionPerformed
        // TODO add your handling code here:
        from_unit.setEnabled(false);
        to_unit.setEnabled(false);
        txt_from.setEnabled(false);
        txt_to.setEnabled(false);
        from_unit.removeAllItems();
        to_unit.removeAllItems();
    }//GEN-LAST:event_UnitActionPerformed

    private void UnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UnitKeyPressed
        // TODO add your handling code here:
        if ( ((evt.getKeyChar() == 10))){OK.setFocusable(true); OK.requestFocus(true);}
    }//GEN-LAST:event_UnitKeyPressed

    private void txt_fromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_fromMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fromMouseClicked

    private void txt_fromFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_fromFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fromFocusGained

    private void txt_fromKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_fromKeyPressed
        // TODO add your handling code here:\
        int l=txt_from.getText().length();//System.out.println(len);
        if((l<=9) || (evt.getKeyChar()==8)){
            if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || (evt.getKeyChar() == 8)))  {
            txt_from.setEditable(true);
        }
        else if((evt.getKeyChar() == '.')){
            if(txt_from.getText().contains(".")){
                txt_from.setEditable(false);}
            else {
                txt_from.setEditable(true);
            }
        }
        else {
            txt_from.setEditable(false);
        }
            
        }
        else{
            txt_from.setEditable(false);
        }
    }//GEN-LAST:event_txt_fromKeyPressed

    private void txt_fromKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_fromKeyReleased
        // TODO add your handling code here:
        
        if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || (evt.getKeyChar() == 8)))  {
            if(!"".equals(txt_from.getText())){
                txt_from.setEditable(true);
                String type_of_unit,from__unit,to__unit;
                float value_of_from_unit,value_of_to_unit;
                type_of_unit=(String) Unit.getSelectedItem();
                from__unit=(String) from_unit.getSelectedItem();
                to__unit=(String) to_unit.getSelectedItem();
                value_of_from_unit=Float.parseFloat(txt_from.getText());
                UnitConvertor obj=new UnitConvertor();
                if(("----Select----".equals(from__unit)) || ("----Select----".equals(to__unit))){
                    if(("----Select----".equals(from__unit)) && ("----Select----".equals(to__unit))){
                        JOptionPane.showMessageDialog(null,"PLEASE SELECT BOTH FROM AND TO UNITS");
                        txt_from.setText("");
                    }
                    else if(("----Select----".equals(from__unit))){
                        JOptionPane.showMessageDialog(null,"PLEASE SELECT FROM UNIT");
                        txt_from.setText("");
                    }
                    else {
                        JOptionPane.showMessageDialog(null,"PLEASE SELECT TO UNIT");
                        txt_from.setText("");
                    }
                }
                else {
                    value_of_to_unit=obj.convertUnit ( type_of_unit , from__unit , to__unit , value_of_from_unit);
                    txt_to.setText(String.valueOf(value_of_to_unit));
                }
            }

            else if("".equals(txt_from.getText())){
                txt_to.setText("");
            }
        }
        else {
            txt_from.setEditable(false);
        }

    }//GEN-LAST:event_txt_fromKeyReleased

    private void from_unitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_from_unitActionPerformed
        // TODO add your handling code here:
        txt_from.setText("");
        txt_to.setText("");
    }//GEN-LAST:event_from_unitActionPerformed

    private void to_unitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_to_unitActionPerformed
        // TODO add your handling code here:
        txt_from.setText("");
        txt_to.setText("");
    }//GEN-LAST:event_to_unitActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        // TODO add your handling code here:

        if(Unit.getSelectedItem()=="Angle"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Degree");
            from.addElement("Gradian");
            from.addElement("Radian");

            to.addElement("----Select----");
            to.addElement("Degree");
            to.addElement("Gradian");
            to.addElement("Radian");
        }
        else if(Unit.getSelectedItem()=="Area"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Acres");
            from.addElement("Hectares");
            from.addElement("Square Cenimeter");
            from.addElement("Square Feet");
            from.addElement("Square Inch");
            from.addElement("Square Kilometer");
            from.addElement("Square Meter");
            from.addElement("Square Mile");
            from.addElement("Square Milimeter");

            to.addElement("----Select----");
            to.addElement("Acres");
            to.addElement("Hectares");
            to.addElement("Square Cenimeter");
            to.addElement("Square Feet");
            to.addElement("Square Inch");
            to.addElement("Square Kilometer");
            to.addElement("Square Meter");
            to.addElement("Square Mile");
            to.addElement("Square Milimeter");
        }
        else if(Unit.getSelectedItem()=="Area"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Acres");
            from.addElement("Hectares");
            from.addElement("Square Cenimeter");
            from.addElement("Square Feet");
            from.addElement("Square Inch");
            from.addElement("Square Kilometer");
            from.addElement("Square Meter");
            from.addElement("Square Mile");
            from.addElement("Square Milimeter");

            to.addElement("----Select----");
            to.addElement("Acres");
            to.addElement("Hectares");
            to.addElement("Square Cenimeter");
            to.addElement("Square Feet");
            to.addElement("Square Inch");
            to.addElement("Square Kilometer");
            to.addElement("Square Meter");
            to.addElement("Square Mile");
            to.addElement("Square Milimeter");
        }
        else if(Unit.getSelectedItem()=="Length"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Centimeter");
            from.addElement("Feet");
            from.addElement("Inch");
            from.addElement("Kilometer");
            from.addElement("Meter");
            from.addElement("Mile");
            from.addElement("Yard");

            to.addElement("----Select----");
            to.addElement("Centimeter");
            to.addElement("Feet");
            to.addElement("Inch");
            to.addElement("Kilometer");
            to.addElement("Meter");
            to.addElement("Mile");
            to.addElement("Yard");
        }
        else if(Unit.getSelectedItem()=="Temperature"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Degrees Celsius");
            from.addElement("Degrees Fahrenheit");
            from.addElement("Kelvin");

            to.addElement("----Select----");
            to.addElement("Degrees Celsius");
            to.addElement("Degrees Fahrenheit");
            to.addElement("Kelvin");
        }
        else if(Unit.getSelectedItem()=="Time"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Day");
            from.addElement("Hours");
            from.addElement("Microsecond");
            from.addElement("Millisecond");
            from.addElement("Minute");
            from.addElement("Second");
            from.addElement("Week");

            to.addElement("----Select----");
            to.addElement("Day");
            to.addElement("Hours");
            to.addElement("Microsecond");
            to.addElement("Millisecond");
            to.addElement("Minute");
            to.addElement("Second");
            to.addElement("Week");
        }
        else if(Unit.getSelectedItem()=="Volume"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Cubic Centimeter");
            from.addElement("Cubic Feet");
            from.addElement("Cubic Inch");
            from.addElement("Cubic Yard");
            from.addElement("Liter");

            to.addElement("----Select----");
            to.addElement("Cubic Centimeter");
            to.addElement("Cubic Feet");
            to.addElement("Cubic Inch");
            to.addElement("Cubic Yard");
            to.addElement("Liter");
        }
        else if(Unit.getSelectedItem()=="Weight"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Gram");
            from.addElement("Killogram");
            from.addElement("Milligram");
            from.addElement("Pounds");
            from.addElement("Stones");
            from.addElement("Tonne");

            to.addElement("----Select----");
            to.addElement("Gram");
            to.addElement("Killogram");
            to.addElement("Milligram");
            to.addElement("Pounds");
            to.addElement("Stones");
            to.addElement("Tonne");
        }
        else{
            JOptionPane.showMessageDialog(null,"PLEASE SELECT THE UNIT FOR CONVERSION");
            Unit.setFocusable(true); Unit.requestFocus(true);
            from_unit.setEnabled(false);
            to_unit.setEnabled(false);
        }
    }//GEN-LAST:event_OKActionPerformed

    private void OKFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OKFocusGained
        // TODO add your handling code here:
        if(Unit.getSelectedItem()=="Angle"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Degree");
            from.addElement("Gradian");
            from.addElement("Radian");

            to.addElement("----Select----");
            to.addElement("Degree");
            to.addElement("Gradian");
            to.addElement("Radian");
        }
        else if(Unit.getSelectedItem()=="Area"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Acres");
            from.addElement("Hectares");
            from.addElement("Square Cenimeter");
            from.addElement("Square Feet");
            from.addElement("Square Inch");
            from.addElement("Square Kilometer");
            from.addElement("Square Meter");
            from.addElement("Square Mile");
            from.addElement("Square Milimeter");

            to.addElement("----Select----");
            to.addElement("Acres");
            to.addElement("Hectares");
            to.addElement("Square Cenimeter");
            to.addElement("Square Feet");
            to.addElement("Square Inch");
            to.addElement("Square Kilometer");
            to.addElement("Square Meter");
            to.addElement("Square Mile");
            to.addElement("Square Milimeter");
        }
        else if(Unit.getSelectedItem()=="Area"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Acres");
            from.addElement("Hectares");
            from.addElement("Square Cenimeter");
            from.addElement("Square Feet");
            from.addElement("Square Inch");
            from.addElement("Square Kilometer");
            from.addElement("Square Meter");
            from.addElement("Square Mile");
            from.addElement("Square Milimeter");

            to.addElement("----Select----");
            to.addElement("Acres");
            to.addElement("Hectares");
            to.addElement("Square Cenimeter");
            to.addElement("Square Feet");
            to.addElement("Square Inch");
            to.addElement("Square Kilometer");
            to.addElement("Square Meter");
            to.addElement("Square Mile");
            to.addElement("Square Milimeter");
        }
        else if(Unit.getSelectedItem()=="Length"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Centimeter");
            from.addElement("Feet");
            from.addElement("Inch");
            from.addElement("Kilometer");
            from.addElement("Meter");
            from.addElement("Mile");
            from.addElement("Yard");

            to.addElement("----Select----");
            to.addElement("Centimeter");
            to.addElement("Feet");
            to.addElement("Inch");
            to.addElement("Kilometer");
            to.addElement("Meter");
            to.addElement("Mile");
            to.addElement("Yard");
        }
        else if(Unit.getSelectedItem()=="Temperature"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Degrees Celsius");
            from.addElement("Degrees Fahrenheit");
            from.addElement("Kelvin");

            to.addElement("----Select----");
            to.addElement("Degrees Celsius");
            to.addElement("Degrees Fahrenheit");
            to.addElement("Kelvin");
        }
        else if(Unit.getSelectedItem()=="Time"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Day");
            from.addElement("Hours");
            from.addElement("Microsecond");
            from.addElement("Millisecond");
            from.addElement("Minute");
            from.addElement("Second");
            from.addElement("Week");

            to.addElement("----Select----");
            to.addElement("Day");
            to.addElement("Hours");
            to.addElement("Microsecond");
            to.addElement("Millisecond");
            to.addElement("Minute");
            to.addElement("Second");
            to.addElement("Week");
        }
        else if(Unit.getSelectedItem()=="Volume"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Cubic Centimeter");
            from.addElement("Cubic Feet");
            from.addElement("Cubic Inch");
            from.addElement("Cubic Yard");
            from.addElement("Liter");

            to.addElement("----Select----");
            to.addElement("Cubic Centimeter");
            to.addElement("Cubic Feet");
            to.addElement("Cubic Inch");
            to.addElement("Cubic Yard");
            to.addElement("Liter");
        }
        else if(Unit.getSelectedItem()=="Weight"){
            DefaultComboBoxModel from = (DefaultComboBoxModel) from_unit.getModel();
            from.removeAllElements();
            DefaultComboBoxModel to = (DefaultComboBoxModel) to_unit.getModel();
            to.removeAllElements();

            from_unit.setEnabled(true);
            to_unit.setEnabled(true);
            txt_from.setEnabled(true);
            txt_to.setEnabled(true);

            from.addElement("----Select----");
            from.addElement("Gram");
            from.addElement("Killogram");
            from.addElement("Milligram");
            from.addElement("Pounds");
            from.addElement("Stones");
            from.addElement("Tonne");

            to.addElement("----Select----");
            to.addElement("Gram");
            to.addElement("Killogram");
            to.addElement("Milligram");
            to.addElement("Pounds");
            to.addElement("Stones");
            to.addElement("Tonne");
        }
        else{
            JOptionPane.showMessageDialog(null,"PLEASE SELECT THE UNIT FOR CONVERSION");
            OK.setFocusable(false); OK.requestFocus(false);
            from_unit.setEnabled(false);
            to_unit.setEnabled(false);
        }
    }//GEN-LAST:event_OKFocusGained

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        MAIN_MENU obj=new MAIN_MENU();
        obj.setVisible(true);
        CloseFrame();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyChar()==10){
            MAIN_MENU obj=new MAIN_MENU();
            obj.setVisible(true);
            CloseFrame();
        }
    }//GEN-LAST:event_jButton4KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Unit_Convertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Unit_Convertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Unit_Convertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Unit_Convertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Unit_Convertor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OK;
    private javax.swing.JComboBox Unit;
    private javax.swing.JComboBox from_unit;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox to_unit;
    private javax.swing.JTextField txt_from;
    private javax.swing.JLabel txt_to;
    // End of variables declaration//GEN-END:variables

    private void CloseFrame() {
        super.dispose();
    }
}
